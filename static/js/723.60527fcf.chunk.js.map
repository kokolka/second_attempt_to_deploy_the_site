{"version":3,"file":"static/js/723.60527fcf.chunk.js","mappings":"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","sources":["webpack://my-app-1-2/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.jsx","webpack://my-app-1-2/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","webpack://my-app-1-2/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","HOC/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__gVGQa\",\"active\":\"Dialog_active__30K3x\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css'\r\nimport noPhoto from '../../../assets/imeges/noPhoto.png'\r\n\r\nconst Dialog = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.foto != null ? props.foto: noPhoto} ></img>\r\n            <NavLink to={path} className={(sa) => {\r\n                    if(sa.isActive){\r\n                        return s.active;\r\n                    }else{\r\n                        return s.dialog;\r\n                    }\r\n                }\r\n            }\r\n            onClick={props.setIsButtonDialog}\r\n            >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","// extracted by mini-css-extract-plugin\nexport default {\"message_1\":\"Message_message_1__Q8FXS\",\"message_2\":\"Message_message_2__pIRAd\",\"message_element_1\":\"Message_message_element_1__YzAWN\",\"message_element_2\":\"Message_message_element_2__sPpN2\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={(props.who === 1) ? s.message_1 : s.message_2}>\r\n            <p className={(props.who === 1) ? s.message_element_1 : s.message_element_2}>\r\n                {props.message}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__UmIPN\",\"dialogs_item\":\"Dialogs_dialogs_item__sngzL\",\"messages\":\"Dialogs_messages__Iebhr\",\"messages__module\":\"Dialogs_messages__module__5WIP1\",\"action_dialog\":\"Dialogs_action_dialog__KLuKg\",\"message_area\":\"Dialogs_message_area__g6Y28\",\"send\":\"Dialogs_send__mJwp2\",\"send_textarea\":\"Dialogs_send_textarea__uZeMV\",\"send_button\":\"Dialogs_send_button__pJgZc\",\"dialogs_icon\":\"Dialogs_dialogs_icon__DF4d0\",\"action_dialog_icon\":\"Dialogs_action_dialog_icon__l+7iB\",\"dialogs_item__module\":\"Dialogs_dialogs_item__module__yHuLM\"};","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport cn from 'classnames';\r\n\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport s from './Dialogs.module.css';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { Textarea } from '../common/FormControls/FormControl';\r\nimport { maxLengthCreator } from '../../Utils/Validations/validators';\r\n\r\nimport dialogIcon from '../../assets/imeges/dialogIcon.png';\r\nimport setNamePage from '../common/SetNamePage/setNamePage';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let [actionName, setActionName] = useState('');\r\n    let paramPage = useParams(); //hoc для получения параметров из url\r\n\r\n    useEffect(() => {\r\n        if (paramPage.id != null) {\r\n            setActionName(props.dialogsData[+paramPage.id - 1].name);\r\n        }\r\n    }, [paramPage.id])\r\n\r\n    //список диалогов\r\n    let dialogsElements = props.dialogsData\r\n        .map(el => <Dialog id={el.id} name={el.name} key={el.id} foto={el.foto} setIsButtonDialog={props.setIsButtonDialog} />);\r\n\r\n    //список сообщений\r\n    let messagesElements = props.messagesData\r\n        .map(message => <Message message={message.message} key={message.id} who={message.who} />)\r\n\r\n    let sendMessage = (text) => {\r\n        props.onSendMessage(text);\r\n    }\r\n\r\n    let maxLength20 = maxLengthCreator(20);\r\n\r\n    let FormSendMessage = () => (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ message: '' }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    sendMessage(values.message);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {(p) => (\r\n                    <Form className={s.send}>\r\n                        <Field\r\n                            className={s.send_textarea}\r\n                            name=\"message\"\r\n                            component={Textarea}\r\n                            placeholder='Enter your post'\r\n                            validate={maxLength20}\r\n                            onKeyDown={(e) => {\r\n                                if (e.keyCode === 13 && e.ctrlKey) {\r\n                                    let a = `${p.values.message}\\n`;\r\n                                    p.setFieldValue('message', a, true);\r\n                                } else if (e.key === 'Enter') {\r\n                                    p.handleSubmit();\r\n                                }\r\n                            }}\r\n                        />\r\n                        <button type=\"submit\" disabled={p.isSubmitting} className={s.send_button}>\r\n                            Send\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n\r\n    let result = '';\r\n    if (actionName != '') {\r\n        result = `Dialog with ${actionName}`;\r\n    } else {\r\n        result = 'Dialogs';\r\n    }\r\n    setNamePage(result);\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            {/* <div className={s.dialogsItem}> */}\r\n            <div className={cn(s.dialogs_item, { [s.dialogs_item__module]: props.isButtonDialog && props.sizeApp <= 767 })}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={cn(s.messages, { [s.dialogs_item__module]: !props.isButtonDialog && props.sizeApp <= 767, [s.messages__module]: props.sizeApp <= 767 })}>\r\n                <div className={s.action_dialog_icon}>\r\n                    {props.sizeApp <= 767\r\n                        ? <img\r\n                            onClick={props.changeIsButtonDialog}\r\n                            className={s.dialogs_icon}\r\n                            src={dialogIcon} />\r\n                        : null}\r\n                    <div className={s.action_dialog}>\r\n                        {actionName}\r\n                    </div>\r\n                </div>\r\n                <div className={s.message_area}>\r\n                    {messagesElements}\r\n                </div>\r\n                <FormSendMessage />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { addMessageActionCreator} from '../../redux/dialog-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { getDialogsData, getMessagesData, getNewMessage } from '../../redux/dialog-selectors';\r\nimport { getIsButtonDialog, getSizeApp } from '../../redux/app-selectors';\r\nimport { changeIsButtonDialog, setIsButtonDialog } from '../../redux/app-reducer';\r\n\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return{\r\n        dialogsData: getDialogsData(state),\r\n        messagesData: getMessagesData(state),\r\n        newMessage: getNewMessage(state),\r\n        isButtonDialog: getIsButtonDialog(state),\r\n        sizeApp: getSizeApp(state) \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        onSendMessage: (text) => {\r\n            dispatch(addMessageActionCreator(text));\r\n        },\r\n        setIsButtonDialog: () => {\r\n            dispatch(setIsButtonDialog());\r\n        },\r\n        changeIsButtonDialog: () => {\r\n            dispatch(changeIsButtonDialog());\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    let RedirectComponent = (props) => {\r\n        \r\n        if(!props.isAuth) return <Navigate to={'/login'}/>;\r\n        \r\n        return <Component {...props}/>;\r\n    }\r\n\r\n    let mapStateToProps = (state) => {\r\n        return{\r\n            isAuth: state.auth.isAuth \r\n        }\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectRedirectComponent;\r\n} "],"names":["props","path","id","className","s","src","foto","noPhoto","to","sa","isActive","onClick","setIsButtonDialog","name","who","message","useState","actionName","setActionName","paramPage","useParams","useEffect","dialogsData","dialogsElements","map","el","messagesElements","messagesData","maxLength20","maxLengthCreator","FormSendMessage","initialValues","onSubmit","values","text","setSubmitting","onSendMessage","p","component","Textarea","placeholder","validate","onKeyDown","e","keyCode","ctrlKey","a","setFieldValue","key","handleSubmit","type","disabled","isSubmitting","result","setNamePage","cn","isButtonDialog","sizeApp","changeIsButtonDialog","dialogIcon","compose","connect","state","getDialogsData","getMessagesData","newMessage","getNewMessage","getIsButtonDialog","getSizeApp","dispatch","addMessageActionCreator","Component","isAuth","auth","Dialogs"],"sourceRoot":""}